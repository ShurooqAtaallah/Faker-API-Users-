{
	"info": {
		"_postman_id": "04862811-166b-4f0a-97c7-3bbb59825245",
		"name": "Faker API Collection (Users)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38254770"
	},
	"item": [
		{
			"name": "Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"pm.test(\"Each user object has the required properties\", function () {\r",
							"    jsonData.forEach(function (user) {\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('userName');\r",
							"        pm.expect(user).to.have.property('password');\r",
							"\r",
							"        pm.expect(user.id).to.be.a('number');\r",
							"        pm.expect(user.password).to.be.a('string');\r",
							"        pm.expect(user.userName).to.be.a('string');\r",
							"        \r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}?userId=1",
					"host": [
						"{{baseUrl}}"
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.response.to.have.status(200);\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"userId\", responseJson.id);\r",
							"\r",
							"pm.test(\"Response contains the user object\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    console.log(\"Content-Type:\", pm.response.headers.get(\"Content-Type\"));\r",
							"\r",
							"    if (contentType && contentType.includes(\"application/json\")) {\r",
							"        try {\r",
							"            const jsonData = responseJson;\r",
							"            console.log(jsonData);\r",
							"\r",
							"            pm.expect(jsonData).to.have.property('id');\r",
							"            pm.expect(jsonData).to.have.property('userName');\r",
							"            pm.expect(jsonData).to.have.property('password');\r",
							"            pm.expect(jsonData.userName).to.eql(\"Shrooq\");\r",
							"        } catch (e) {\r",
							"            pm.expect.fail(\"Failed to parse JSON: \" + e.message);\r",
							"        }\r",
							"    } else {\r",
							"        pm.expect.fail(\"Incorrect content type: \" + contentType);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 20,\r\n  \"userName\": \"Shrooq\",\r\n  \"lastName\": \"Ayman\",\r\n  \"email\": \"Shrooq.Ayman@gmail.com\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"if (!pm.environment.get(\"userId\")) {\r",
							"    \r",
							"    pm.environment.set(\"userId\", \"1\"); \r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains updated user object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userName).to.eql(\"Shrooqq\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"Shrooqq\",\r\n  \"lastName\": \"Aymann\",\r\n  \"email\": \"Shrooq.Ayman@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"if (!pm.environment.get(\"userId\")) {\r",
							"    \r",
							"    pm.environment.set(\"userId\", \"1\"); \r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 or 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    var responseBody = pm.response.text(); \r",
							"\r",
							"    pm.expect(responseBody).to.be.empty; \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}